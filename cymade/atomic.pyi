"""
This type stub file was generated by cyright.
"""

from typing import Self

class U64:
    """
    Integer Atomic counter, 64-bit unsigned.
    Can store up to 2^64 - 1

    This class is full thread safe.

    During creation the on_zero optional argument can
    be passed to specify a function to execute when the
    atomic counter reaches zero.
    """

    def __init__(self, init_value: int = 0, on_zero: object = None):
        """
        Initialize the U64 atomic counter.

        :param init_value: Initial value of the counter (default is 0).
        :param on_zero: Optional callable to execute when the counter reaches zero.
        """
        ...
    def __int__(self) -> int:
        ...
    
    def __float__(self) -> float:
        ...
    
    def __iadd__(self, other) -> Self:
        ...
    
    def __isub__(self, other) -> Self:
        ...
    
    def __imul__(self, other) -> Self:
        ...
    
    def __ifloordiv__(self, other) -> Self:
        ...
    
    def __imod__(self, other) -> Self:
        ...
    
    def __ipow__(self, other) -> Self:
        ...
    
    def __ilshift__(self, other) -> Self:
        ...
    
    def __irshift__(self, other) -> Self:
        ...
    
    def __iand__(self, other) -> Self:
        ...
    
    def __ior__(self, other) -> Self:
        ...
    
    def __ixor__(self, other) -> Self:
        ...
    


class Float:
    """
    Float value that is thread safe.
    """
    def __init__(self, init_value: float = 0.0):
        """
        Initialize the Float atomic counter.

        :param init_value: Initial value of the counter (default is 0.0).
        """
        ...
    def __float__(self) -> float:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __iadd__(self, other) -> Self:
        ...
    
    def __isub__(self, other) -> Self:
        ...
    
    def __imul__(self, other) -> Self:
        ...
    
    def __itruediv__(self, other) -> Self:
        ...
    
    def __ifloordiv__(self, other) -> Self:
        ...
    
    def __imod__(self, other) -> Self:
        ...
    
    def __ipow__(self, other) -> Self:
        ...
    


class Int:
    """
    Integer Atomic counter with arbitrary precision (Python int).
    This class is full thread safe.
    """
    def __init__(self, init_value: int = 0):
        """
        Initialize the Int atomic counter.

        :param init_value: Initial value of the counter (default is 0).
        """
        ...
    def __int__(self) -> int:
        ...
    
    def __float__(self) -> float:
        ...
    
    def __iadd__(self, other) -> Self:
        ...
    
    def __isub__(self, other) -> Self:
        ...
    
    def __imul__(self, other) -> Self:
        ...
    
    def __ifloordiv__(self, other) -> Self:
        ...
    
    def __imod__(self, other) -> Self:
        ...
    
    def __ipow__(self, other) -> Self:
        ...
    
    def __ilshift__(self, other) -> Self:
        ...
    
    def __irshift__(self, other) -> Self:
        ...
    
    def __iand__(self, other) -> Self:
        ...
    
    def __ior__(self, other) -> Self:
        ...
    
    def __ixor__(self, other) -> Self:
        ...
    


class I64:
    """
    Integer Atomic counter, 64-bit signed.
    Can store from -2^63 to 2^63 - 1
    
    This class is full thread safe.
    """
    def __init__(self, init_value: int = 0):
        """
        Initialize the I64 atomic counter.

        :param init_value: Initial value of the counter (default is 0).
        """
        ...
    def __int__(self) -> int:
        ...
    
    def __float__(self) -> float:
        ...
    
    def __iadd__(self, other) -> Self:
        ...
    
    def __isub__(self, other) -> Self:
        ...
    
    def __imul__(self, other) -> Self:
        ...
    
    def __ifloordiv__(self, other) -> Self:
        ...
    
    def __imod__(self, other) -> Self:
        ...
    
    def __ipow__(self, other) -> Self:
        ...
    
    def __ilshift__(self, other) -> Self:
        ...
    
    def __irshift__(self, other) -> Self:
        ...
    
    def __iand__(self, other) -> Self:
        ...
    
    def __ior__(self, other) -> Self:
        ...
    
    def __ixor__(self, other) -> Self:
        ...
    


