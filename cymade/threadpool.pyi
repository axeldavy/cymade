"""
This type stub file was generated by cyright.
"""

import cython
from typing import Any, Self, AsyncGenerator, Literal

class Worker:
    """
    Represents a worker thread running task from the threadpool
    """
    def __init__(self) -> None:
        ...
    
    def _run(self) -> None:
        """
        Main loop of the worker
        """
        ...
    


@cython.final
class Future:
    """
    An optimized future object representing the result of asynchronous computation.
    
    The Future class provides a way to access the result of a function that has been
    executed asynchronously in a thread pool. This implementation is similar to
    Python's standard `concurrent.futures.Future`
    """
    def cancel(self) -> bool:
        """
        Attempt to cancel the call. Return False if the call is currently
        being executed or finished running, True otherwise.
        """
        ...
    
    def cancelled(self) -> bool:
        """Return True if the call was successfully cancelled."""
        ...
    
    def running(self) -> bool:
        """Return True if the call is currently being executed."""
        ...
    
    def done(self) -> bool:
        """Return True if the call was successfully cancelled or finished running."""
        ...
    
    def __await__(self) -> AsyncGenerator[Any, None, Any]:
        """
        Makes the Future awaitable in asyncio contexts.
        
        This allows using the Future directly with the 'await' keyword
        in asynchronous functions without wrapping it with asyncio.wrap_future(),
        which isn't compatible with this implementation.
        
        Returns:
        --------
        iterator
            An iterator compatible with the asyncio await protocol.
        """
        ...
    
    def result(self, timeout=...) -> object:
        """
        Return the result of the call.

        This method blocks until the Future completes or the specified timeout expires.
        Once completed, it returns the result of the callable that was submitted to
        the thread pool, or raises any exception that was raised during execution.

        Parameters:
        -----------
        timeout : float or None, default=None
            Maximum number of seconds to wait for the result. If None, wait indefinitely.
            Can be an integer or a float for sub-second precision.

        Returns:
        --------
        object
            The result of the callable that was submitted to the thread pool.

        Raises:
        -------
        TimeoutError
            If the timeout expires before the Future completes.
        CancelledError
            If the Future was cancelled before completing.
        Exception
            Any exception raised during execution of the callable.
        """
        ...
    
    def exception(self, timeout=...) -> object:
        """
        Return the exception raised by the call.

        This method blocks until the Future completes or the specified timeout expires.
        It returns the exception raised by the callable that was submitted to the
        thread pool, or None if the callable completed without raising an exception.

        Parameters:
        -----------
        timeout : float or None, default=None
            Maximum number of seconds to wait for the Future to complete. If None,
            wait indefinitely. Can be an integer or a float for sub-second precision.

        Returns:
        --------
        Exception or None
            The exception raised by the callable, or None if no exception was raised.

        Raises:
        -------
        TimeoutError
            If the timeout expires before the Future completes.
        CancelledError
            If the Future was cancelled before completing.
        """
        ...
    
    def add_done_callback(self, fn) -> None:
        """
        Attaches a callable to the Future to be called when the Future completes.

        The callback will be called with the Future object as its only argument when
        the Future completes, either by returning a result, raising an exception, or
        being cancelled.

        Parameters:
        -----------
        fn : callable
            A callable that takes a Future object as its only argument. The callable
            will be called when the Future completes.

        Notes:
        ------
        - Added callbacks are executed in the order they were added.
        - If the callable raises an Exception, it will be ignored.
        - If the Future has already completed or been cancelled, the callable is
          called immediately.
        - Callbacks are executed by the thread that completes the Future, not by
          a separate thread.
        """
        ...
    


@cython.final
class ThreadPool:
    """
    An efficient thread pool implementation that extends the standard threadpool API
    with priority scheduling and optimized internals.
    
    The ThreadPool class manages a group of worker threads that execute submitted tasks
    asynchronously. It provides a flexible and efficient way to parallelize CPU-bound
    and I/O-bound operations across multiple threads.
    
    Key Features:
    -------------
    - Priority-based task scheduling using C++'s priority queue
    - Optimized Cython/C++ implementation for reduced Python overhead
    - Worker threads persist through task errors for robustness
    - Support for task cancellation and timeouts
    - Custom priority levels with special semantics (blocking vs non-blocking)
    - Compatible with Python's context manager protocol (with statement)
    
    Priority System:
    ---------------
    The ThreadPool uses a priority system where:
    - Lower values indicate higher execution priority
    - Negative priority: Blocking tasks that prevent execution of non-negative priority tasks
    - Zero priority: Standard tasks with no special handling
    - Positive priority: Tasks that respect a waiting period (in ms) after blocking tasks
    
    Performance Characteristics:
    --------------------------
    - Minimal Python GIL contention due to C++ internals
    - Efficient task scheduling with O(log n) insertion and removal
    - Low memory overhead compared to pure Python implementations
    - Automatic thread management based on system capabilities
    
    Error Handling:
    --------------
    By default, exceptions in tasks are logged without terminating the worker threads.
    This behavior can be customized by subclassing ThreadPool and overriding the 
    report_error method.
    
    Examples:
    ---------
    Basic usage:
    
    >>> import time
    >>> from cymade.threadpool import ThreadPool
    >>>
    >>> # Create a thread pool with 4 workers
    >>> pool = ThreadPool(max_workers=4)
    >>>
    >>> # Submit tasks to the pool
    >>> def compute_square(x):
    ...     return x * x
    ...
    >>> future = pool.submit(compute_square, 10)
    >>> print(future.result())  # Wait for and retrieve the result
    100
    >>>
    >>> # Don't forget to shut down the pool when done
    >>> pool.shutdown()
    
    Using as a context manager:
    
    >>> with ThreadPool() as pool:
    ...     # Submit multiple tasks
    ...     futures = [pool.submit(compute_square, i) for i in range(10)]
    ...     
    ...     # Collect results
    ...     results = [future.result() for future in futures]
    ...     print(results)
    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
    
    Priority scheduling:
    
    >>> def slow_task(task_id, duration):
    ...     time.sleep(duration)
    ...     return f"Task {task_id} completed"
    >>>
    >>> with ThreadPool(max_workers=2) as pool:
    ...     # Submit tasks with different priorities
    ...     # High priority (blocking) task
    ...     high_prio = pool.schedule(-10, slow_task, "high", 0.5)
    ...     
    ...     # Normal priority tasks
    ...     normal = pool.schedule(0, slow_task, "normal", 0.5)
    ...     
    ...     # Low priority task (waits 200ms after blocking tasks)
    ...     low_prio = pool.schedule(200, slow_task, "low", 0.5)
    ...     
    ...     # Results will be available in priority order
    ...     print(high_prio.result())
    ...     print(normal.result())
    ...     print(low_prio.result())
    Task high completed
    Task normal completed
    Task low completed
    
    Parallel mapping:
    
    >>> # Process items in parallel using map
    >>> with ThreadPool() as pool:
    ...     # Apply a function to each item
    ...     results = list(pool.map(lambda x: x**2, range(1, 6)))
    ...     print(results)
    [1, 4, 9, 16, 25]
    
    Error handling:
    
    >>> # Create a custom threadpool with error handling
    >>> class MyThreadPool(ThreadPool):
    ...     def report_error(self, future, exception, traceback_str):
    ...         print(f"Task failed with error: {exception}")
    ...         # Log, notify, or take other actions
    >>>
    >>> with MyThreadPool() as pool:
    ...     # This task will raise an exception
    ...     future = pool.submit(lambda: 1/0)
    ...     try:
    ...         result = future.result()
    ...     except ZeroDivisionError:
    ...         print("Caught division by zero")
    Task failed with error: division by zero
    Caught division by zero
    
    Notes:
    ------
    - The pool automatically creates threads based on the number of CPU cores when max_workers is None
    - To prevent memory leaks, always call shutdown() or use the pool as a context manager
    - For long-running applications, consider using multiple pools for different task categories
    - Avoid running CPU-intensive tasks with excessive parallelism as this can degrade performance
    """
    def __init__(self, max_workers=...) -> None:
        """
        Initialize the thread pool with the given number of workers
        
        If max_workers is None, it defaults to the number of processors on the machine
        """
        ...
    
    def __del__(self) -> None:
        """
        Destructor to ensure resources are cleaned up
        """
        ...
    
    def submit(self, callable, *args, **kwargs) -> Future:
        """
        Submit a callable to be executed with the given arguments.
        
        This method schedules the callable to be executed and returns a Future object
        representing the execution of the callable.
        
        Parameters:
        -----------
        callable : callable
            The callable object to be executed.
        *args : positional arguments
            Positional arguments to pass to the callable.
        **kwargs : keyword arguments
            Keyword arguments to pass to the callable.
            
        Returns:
        --------
        Future
            A Future object representing the execution of the callable.
            
        Raises:
        -------
        RuntimeError
            If the pool has been shut down.
        """
        ...

    def schedule(self, priority, callable, *args, **kwargs) -> Future:
        """
        Submit a callable with a priority (lower values are executed first).
        
        This method schedules the callable to be executed based on the given priority
        and returns a Future object representing the execution.
        
        Parameters:
        -----------
        priority : float
            The priority of the task. Lower values indicate higher priority.
            Negative values create blocking jobs that prevent execution of non-negative priority jobs.
            Positive values enforce a waiting period (in milliseconds) after blocking jobs.
            Zero priority jobs have standard priority with no waiting period.
        callable : callable
            The callable object to be executed.
        *args : positional arguments
            Positional arguments to pass to the callable.
        **kwargs : keyword arguments
            Keyword arguments to pass to the callable.
            
        Returns:
        --------
        Future
            A Future object representing the execution of the callable.
            
        Raises:
        -------
        RuntimeError
            If the pool has been shut down.
            
        Notes:
        ------
        - Negative priority tasks block execution of zero and positive priority tasks
        - When a negative priority task completes, a timestamp is recorded
        - Positive priority tasks will wait their priority value (in ms) after the last blocking task
        - Multiple negative priority tasks will execute concurrently
        """
        ...
    
    def shutdown(self, wait=..., *, cancel_futures=...) -> None:
        """
        Signal the executor that it should free any resources and shut down.
        
        This method should be called when the thread pool is no longer needed.
        Once shutdown is called, new tasks cannot be submitted to the pool.
        
        Parameters:
        -----------
        wait : bool, default=True
            If True, this method will block until all pending futures are done
            executing, including both running and queued futures.
            If False, the method returns immediately and resources will be freed 
            when all futures are done executing.
        cancel_futures : bool, default=False
            If True, all pending futures will be cancelled and their results will not be available.
        
        Notes:
        ------
        - After shutdown, attempting to submit new tasks will raise RuntimeError
        - This method may be called multiple times safely
        """
        ...
    
    def __enter__(self) -> Self:
        """
        Enter the runtime context for the ThreadPool.
        
        This method enables the ThreadPool to be used as a context manager
        with the 'with' statement, ensuring proper cleanup of resources.
        
        Returns:
        --------
        ThreadPool
            Returns the ThreadPool instance itself to be used in the context block.

        """
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb) -> Literal[False]:
        """
        Exit the runtime context for the ThreadPool.
        
        This method is called automatically when exiting a 'with' block.
        It shuts down the ThreadPool and waits for all submitted tasks to complete.
        
        Parameters:
        -----------
        exc_type : Exception type or None
            The type of exception raised in the context block, if any
        exc_val : Exception or None
            The exception instance raised, if any
        exc_tb : traceback or None
            The traceback of the exception, if any
            
        Returns:
        --------
        bool
            False to indicate that any exceptions should be propagated
            
        Notes:
        ------
        - This method calls shutdown(wait=True) to ensure all tasks complete
        - Exceptions from the context block will be propagated
        - Exceptions from the workers are handled by report_error method
        """
        ...
    
    def map(self, fn, *iterables, timeout=...): # -> Generator[Unknown, None, None]:
        """
        Apply the function to every item in the iterables in parallel.
        
        This method is similar to the built-in map() function but executes
        the function calls asynchronously using the thread pool. Results are
        yielded in the order of the original iterables as they become available.
        
        Parameters:
        -----------
        fn : callable
            A callable that will take as many arguments as there are iterables.
        *iterables : iterable objects
            One or more iterables containing the data to process.
        timeout : float or None, default=None
            The maximum number of seconds to wait for each result.
            If None, there is no timeout.
            
        Yields:
        -------
        Results from the function calls in the order of the input iterables.
            
        Raises:
        -------
        TimeoutError
            If the result isn't available within the given timeout.
        CancelledError
            If the future was cancelled.
        Exception
            Any exception raised by the callable function.
        """
        ...
    


